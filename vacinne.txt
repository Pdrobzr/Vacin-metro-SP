package tp;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.Serializable;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.InvalidPathException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.Collator;
import java.text.Normalizer;
import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.Scanner;
import java.util.Arrays;
import java.util.Base64;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Locale;
import java.util.regex.Pattern;

import org.xml.sax.InputSource;

public class VacinneFinder {

    static Scanner in = new Scanner(System.in, "ISO-8859-1");

    public static void main(String[] args) {

        int op = -1;
        do {
            try {
                System.out.println("OlÃ¡, seja bem vindo ao Vaccine Finder!");         // Menu de opÃ§oes pro usuario
                System.out.println("<1> Insira uma nova cidade");
                System.out.println("<2> Listar cidades");
                System.out.println("<3> Insira um novo tipo de dose");
                System.out.println("<4> Listar tipos de doses");
                System.out.println("<5> Atualizar doses aplicadas em uma cidade");
                System.out.println("<6> Atualizar doses aplicadas em varias cidades");
                System.out.println("<7> Listar doses de uma cidade");
                System.out.println("<0> Sair do sistema");

                op = in.nextInt();
                in.nextLine();
                switch (op) {
                    case 1:
                        novaCidade();
                        break;
                    case 2:
                        listarCidade();
                        break;
                    case 3:
                        novaDose();
                        break;
                    case 4:
                        listarDose();
                        break;
                    case 5:
                        atualizarDose();
                        break;
                    case 6:
                        atualizarDoses();
                        break;
                    case 7:
                        listarDosesAplicadas();
                        break;
                    case 0:
                        break;
                    default:
                        System.out.println("OpÃ§Ã£o Invalida!");
                }
            } catch (InputMismatchException e) {
                System.out.println("OpÃ§Ã£o invalida");   // tratamento de excecao
                in.next();
            }

        } while (op != 0);
        in.close();
    }

    private static boolean cidadeExiste(String nome) {      // verificar se a cidade existe no arquivo binario
        try ( ObjectInputStream input = new ObjectInputStream(Files.newInputStream(Paths.get("C:/Users/pedro/OneDrive/Área de Trabalho/cidade.dat")))) {
            while (true) {                                  // looping infinito
                Cidade c = (Cidade) input.readObject();
                if (new String(c.nome, "utf-8").equalsIgnoreCase(nome)) {            // se existir cidades iguais, ele retorna true
                    return true;
                }
            }
        } catch (EOFException e) {
            return false;
        } catch (ClassNotFoundException e) {
            System.out.println("Tipo de objeto invalido!");
        } catch (IOException e) {
            System.out.println("Erro de leitura no arquivo");
        }
        return false;
    }

    private static void novaCidade() {                 // adicionar uma nova cidade no arquivo binario
        Cidade nova = new Cidade();
        try {

            System.out.print("Nome da cidade: ");
            String cidade = in.nextLine();
            nova.nome = cidade.getBytes("UTF-8");

            if (cidadeExiste(new String(nova.nome, "utf-8"))) {                 // se cidadeExiste retornar true, exibir a mensagem abaixo e dar return
                System.out.println("Erro: Essa cidade jÃ¡ estÃ¡ cadastrada!");

                return;
            }
            Path path = Paths.get("C:/Users/pedro/OneDrive/Área de Trabalho/cidade.dat");

            if (Files.exists(path)) {
                List lista = new ArrayList();       // cria um array de elementos indefinidos
                try ( ObjectInputStream input = new ObjectInputStream(Files.newInputStream(Paths.get("C:/Users/pedro/OneDrive/Área de Trabalho/cidade.dat")))) { // appending Ã© o jeitinho de completar o true    
                    while (true) {
                        Cidade c = (Cidade) input.readObject();
                        lista.add(c);
                    }
                } catch (EOFException e) {
                    try ( ObjectOutputStream output = new ObjectOutputStream(Files.newOutputStream(path))) {
                        lista.add(nova);
                        Collections.sort(lista);
                        // armazena as novas cidades no arraylist
                        //Collections.sort(lista);                      // organiza as cidades em ordem alfabetica
                        for (int i = 0; i < lista.size(); i++) {
                            output.writeObject(lista.get(i));
                        }

                    } catch (IOException e1) {
                        System.out.println("Erro de escrita do arquivo!");
                    }

                } catch (FileNotFoundException e) {
                    System.out.println("Nao foi possÃ­vel abrir o arquivo cidade.dat!");
                } catch (IOException e) {
                    System.out.println("Erro de escrita no arquivo cidade.dat!");
                } catch (Exception e) {
                }
            } else {
                try ( ObjectOutputStream output = new ObjectOutputStream(Files.newOutputStream(path))) {
                    output.writeObject(nova);
                } catch (IOException e) {
                    System.out.println("Erro de escrita no arquivo cidade.dat!");
                }
            }

        } catch (InvalidPathException e) {
            System.out.println("Nao foi possivel encontrar o arquivo cidade.dat!");
        } catch (InputMismatchException e) {
            System.out.println("Erro de entrada de dados!");
        } catch (IOException e) {
            System.out.println("Erro na entrada de dados!");
        }

    }

    private static void listarCidade() {       // listar as cidades existentes no arquivo binario
        try ( ObjectInputStream input = new ObjectInputStream(Files.newInputStream(Paths.get("C:/Users/pedro/OneDrive/Área de Trabalho/cidade.dat")))) {
            while (true) {
                Cidade c = (Cidade) input.readObject();
                String bytesDecoded = new String(c.nome, "utf-8");
                System.out.println(bytesDecoded);

            }

        } catch (EOFException e) {
            System.out.println("Fim dos registros");
        } catch (ClassNotFoundException e) {
            System.out.println("Tipo de objeto invalido!");
        } catch (IOException e) {
            System.out.println("Erro de leitura no arquivo");
        }

    }

    private static boolean doseExiste(String tipo) {      // verificar se a cidade existe no arquivo binario
        try ( ObjectInputStream input = new ObjectInputStream(Files.newInputStream(Paths.get("C:/Users/pedro/OneDrive/Área de Trabalho/tipodose.dat")))) {
            while (true) {                                  // looping infinito
                TiposDoses d = (TiposDoses) input.readObject();
                if (new String(d.tipo, "utf-8").equalsIgnoreCase(tipo)) {            // se existir cidades iguais, ele retorna true
                    return true;
                }
            }
        } catch (EOFException e) {
            return false;
        } catch (ClassNotFoundException e) {
            System.out.println("Tipo de objeto invalido!");
        } catch (IOException e) {
            System.out.println("Erro de leitura no arquivo");
        }
        return false;
    }

    private static void novaDose() {                 // adicionar uma nova cidade no arquivo binario
        TiposDoses nov = new TiposDoses();
        try {

            System.out.print("Tipo de dose: ");
            String tipos = in.nextLine();
            tipos = tipos.replace(" ", "_");
            nov.tipo = tipos.getBytes("UTF-8");

            String bytesDecoded = new String(nov.tipo, "utf-8");

            if (doseExiste(bytesDecoded)) {                 // se cidadeExiste retornar true, exibir a mensagem abaixo e dar return
                System.out.println("Erro: esse tipo de dose já esta cadastrado!");

                return;
            }
            Path path = Paths.get("C:/Users/pedro/OneDrive/Área de Trabalho/tipodose.dat");

            if (Files.exists(path)) {
                List lista = new ArrayList();       // cria um array de elementos indefinidos
                try ( ObjectInputStream input = new ObjectInputStream(Files.newInputStream(Paths.get("C:/Users/pedro/OneDrive/Área de Trabalho/tipodose.dat")))) { // appending Ã© o jeitinho de completar o true    
                    while (true) {
                        TiposDoses d = (TiposDoses) input.readObject();
                        lista.add(d);
                    }
                } catch (EOFException e) {
                    try ( ObjectOutputStream output = new ObjectOutputStream(Files.newOutputStream(path))) {
                        lista.add(nov);

                        // armazena as novas cidades no arraylist
                        //Collections.sort(lista);                      // organiza as cidades em ordem alfabetica
                        for (int i = 0; i < lista.size(); i++) {
                            output.writeObject(lista.get(i));
                        }

                    } catch (IOException e1) {
                        System.out.println("Erro de escrita do arquivo!");
                    }

                } catch (FileNotFoundException e) {
                    System.out.println("Nao foi possÃ­vel abrir o arquivo tipodose.dat!");
                } catch (IOException e) {
                    System.out.println("Erro de escrita no arquivo tipodose.dat!");
                } catch (Exception e) {
                }
            } else {
                try ( ObjectOutputStream output = new ObjectOutputStream(Files.newOutputStream(path))) {
                    output.writeObject(nov);
                } catch (IOException e) {
                    System.out.println("Erro de escrita no arquivo tipodose.dat!");
                }
            }

        } catch (InvalidPathException e) {
            System.out.println("Nao foi possivel encontrar o arquivo tipodose.dat!");
        } catch (InputMismatchException e) {
            System.out.println("Erro de entrada de dados!");
        } catch (IOException e) {
            System.out.println("Erro na entrada de dados!");
        }
    }

    private static void listarDose() {       // listar as cidades existentes no arquivo binario
        try ( ObjectInputStream input = new ObjectInputStream(Files.newInputStream(Paths.get("C:/Users/pedro/OneDrive/Área de Trabalho/tipodose.dat")))) {
            while (true) {
                TiposDoses d = (TiposDoses) input.readObject();
                String bytesDecoded = new String(d.tipo, "utf-8");
                System.out.println(bytesDecoded);

            }

        } catch (EOFException e) {
            System.out.println("Fim dos registros");
        } catch (ClassNotFoundException e) {
            System.out.println("Tipo de objeto invalido!");
        } catch (IOException e) {
            System.out.println("Erro de leitura no arquivo");
        }

    }

    private static void atualizarDose() {
        Path path = Paths.get("C:/Users/pedro/OneDrive/Área de Trabalho/dosesaplicadas.dat");

        if (Files.exists(path)) {/*
            List lista = new ArrayList();       // cria um array de elementos indefinidos
            try ( ObjectInputStream input = new ObjectInputStream(Files.newInputStream(Paths.get("C:/Users/pedro/OneDrive/Área de Trabalho/dosesaplicadas.dat")))) { // appending Ã© o jeitinho de completar o true    
                while (true) {
                    Cidade c = (Cidade) input.readObject();
                    lista.add(c);
                }
            } catch (EOFException e) {
                try ( ObjectOutputStream output = new ObjectOutputStream(Files.newOutputStream(path))) {
                    lista.add(nova);
                    Collections.sort(lista);
                    // armazena as novas cidades no arraylist
                    //Collections.sort(lista);                      // organiza as cidades em ordem alfabetica
                    for (int i = 0; i < lista.size(); i++) {
                        output.writeObject(lista.get(i));
                    }

                } catch (IOException e1) {
                    System.out.println("Erro de escrita do arquivo!");
                }

            } catch (FileNotFoundException e) {
                System.out.println("Nao foi possÃ­vel abrir o arquivo cidade.dat!");
            } catch (IOException e) {
                System.out.println("Erro de escrita no arquivo cidade.dat!");
            } catch (Exception e) {
            }  */
        } else {
            try ( ObjectOutputStream output = new ObjectOutputStream(Files.newOutputStream(path))) {

                ArrayList<String> cidades = new ArrayList<String>();
                try ( ObjectInputStream input = new ObjectInputStream(Files.newInputStream(Paths.get("C:/Users/pedro/OneDrive/Área de Trabalho/cidade.dat")))) {

                    while (true) {
                        Cidade c = (Cidade) input.readObject();
                        String bytesDecoded = new String(c.nome, "utf-8");
                        cidades.add(bytesDecoded);

                    }

                } catch (EOFException e) {
                    System.out.println("Fim dos registros");
                } catch (ClassNotFoundException e) {
                    System.out.println("Tipo de objeto invalido!");
                } catch (IOException e) {
                    System.out.println("Erro de leitura no arquivo");
                }
                ArrayList<String> tiposDoses = new ArrayList<String>();
                try ( ObjectInputStream input = new ObjectInputStream(Files.newInputStream(Paths.get("C:/Users/pedro/OneDrive/Área de Trabalho/tipodose.dat")))) {

                    while (true) {
                        TiposDoses d = (TiposDoses) input.readObject();
                        String bytesDecoded = new String(d.tipo, "utf-8");
                        tiposDoses.add(bytesDecoded);

                    }

                } catch (EOFException e) {
                    System.out.println("Fim dos registros");
                } catch (ClassNotFoundException e) {
                    System.out.println("Tipo de objeto invalido!");
                } catch (IOException e) {
                    System.out.println("Erro de leitura no arquivo");
                }

                for (int i = 0; i < cidades.size(); i++) {
                    for (int j = 0; j < tiposDoses.size(); j++) {
                        //  doses = new DosesAplicadas(cidades.get(i).getBytes("UTF-8"), tiposDoses.get(j).getBytes("UTF-8"), "0".getBytes());
                        output.writeObject(new DosesAplicadas(cidades.get(i).getBytes("UTF-8"), tiposDoses.get(j).getBytes("UTF-8"), 0));
                    }
                }

                System.out.println("Insira a cidade que você deseja atualizar o numero de doses");
                String cidadeDose = in.nextLine();
                ArrayList<DosesAplicadas> dosesAplicadas = new ArrayList<DosesAplicadas>();
                boolean existe = false;
                for (int i = 0; i < cidades.size(); i++) {
                    if (cidades.get(i).equalsIgnoreCase(cidadeDose)) {
                        existe = true;
                        break;
                    }

                }

                if (existe == false) {
                    System.out.println("Essa cidade não foi inserida");

                    return;
                }
                for (int j = 0; j < tiposDoses.size(); j++) {
                    System.out.println("Insira a quantidade de doses do tipo " + tiposDoses.get(j));
                    editarDosesAplicadas(cidadeDose, tiposDoses.get(j), in.nextInt());

                }

            } catch (IOException e) {
                System.out.println("Erro de escrita no arquivo cidade.dat!");
            }
        }
    }

    public static void editarDosesAplicadas(String c, String d, int q) {

        ArrayList<DosesAplicadas> dosesAplicadas = new ArrayList<DosesAplicadas>();

        try ( ObjectInputStream input = new ObjectInputStream(Files.newInputStream(Paths.get("C:/Users/pedro/OneDrive/Área de Trabalho/dosesaplicadas.dat")))) {

            while (true) {
                DosesAplicadas da = (DosesAplicadas) input.readObject();
                dosesAplicadas.add(da);

            }
        } catch (EOFException e) {
            try {

                DosesAplicadas doseA;
                for (int i = 0; i < dosesAplicadas.size(); i++) {
                    doseA = dosesAplicadas.get(i);
                    if (new String(doseA.cidade, "utf-8").equalsIgnoreCase(c) && new String(doseA.dose, "utf-8").equalsIgnoreCase(d)) {
                        dosesAplicadas.set(i, new DosesAplicadas(doseA.cidade, doseA.dose, q));
                        try ( ObjectOutputStream output = new ObjectOutputStream(Files.newOutputStream(Paths.get("C:/Users/pedro/OneDrive/Área de Trabalho/dosesaplicadas.dat")))) {
                            for (int j = 0; j < dosesAplicadas.size(); j++) {
                                output.writeObject(dosesAplicadas.get(j));

                            }
                            return;
                        }
                    }
                }

                System.out.println("Cidade ou tipo de dose não existe!");
                return;
            } catch (Exception e1) {
                System.out.println("Erro de conversão");
            }
        } catch (ClassNotFoundException e) {
            System.out.println("Tipo de objeto invalido!");
        } catch (IOException e) {
            System.out.println("Erro de leitura no arquivo");
        }
    }

    public static void atualizarDoses() {
        int op = 1;
        do{ 
            atualizarDose();
            System.out.println("Deseja continuar? (1-s ou 2-n)");
            op = in.nextInt();
            
        }
        
        while(op != 2);
            
            
        
            
        
    }

    public static void listarDosesAplicadas() {
        Path path = Paths.get("C:/Users/pedro/OneDrive/Área de Trabalho/dosesaplicadas.dat");

        if (!Files.exists(path)) {
            criarDosesAplicadas();
        }

        System.out.print("Insira a cidade \n");
        String cidade = "";
        cidade = in.nextLine();

        ArrayList<DosesAplicadas> dosesAplicadas = new ArrayList<DosesAplicadas>();
        try ( ObjectInputStream input = new ObjectInputStream(Files.newInputStream(Paths.get("C:/Users/pedro/OneDrive/Área de Trabalho/dosesaplicadas.dat")))) {

            while (true) {
                DosesAplicadas da = (DosesAplicadas) input.readObject();
                dosesAplicadas.add(da);

            }
        } catch (EOFException e) {
            try {
                System.out.println("Doses da cidade " + cidade);
                DosesAplicadas doseA;
                for (int i = 0; i < dosesAplicadas.size(); i++) {
                    doseA = dosesAplicadas.get(i);
                    if (new String(doseA.cidade, "utf-8").equalsIgnoreCase(cidade)) {
                        System.out.println("Tipo: " + new String(doseA.dose, "utf-8") + "  Quantidade: " + doseA.quantidade);
                    }

                }
                return;

            } catch (Exception e1) {
                System.out.println("Erro de conversão");
            }
        } catch (ClassNotFoundException e) {
            System.out.println("Tipo de objeto invalido!");
        } catch (IOException e) {
            System.out.println("Erro de leitura no arquivo");
        }

    }

    public static void criarDosesAplicadas() {
        Path path = Paths.get("C:/Users/pedro/OneDrive/Área de Trabalho/dosesaplicadas.dat");
        try ( ObjectOutputStream output = new ObjectOutputStream(Files.newOutputStream(path))) {

            ArrayList<String> cidades = new ArrayList<String>();
            try ( ObjectInputStream input = new ObjectInputStream(Files.newInputStream(Paths.get("C:/Users/pedro/OneDrive/Área de Trabalho/cidade.dat")))) {

                while (true) {
                    Cidade c = (Cidade) input.readObject();
                    String bytesDecoded = new String(c.nome, "utf-8");
                    cidades.add(bytesDecoded);

                }

            } catch (EOFException e) {
                System.out.println("Fim dos registros");
            } catch (ClassNotFoundException e) {
                System.out.println("Tipo de objeto invalido!");
            } catch (IOException e) {
                System.out.println("Erro de leitura no arquivo");
            }
            ArrayList<String> tiposDoses = new ArrayList<String>();
            try ( ObjectInputStream input = new ObjectInputStream(Files.newInputStream(Paths.get("C:/Users/pedro/OneDrive/Área de Trabalho/tipodose.dat")))) {

                while (true) {
                    TiposDoses d = (TiposDoses) input.readObject();
                    String bytesDecoded = new String(d.tipo, "utf-8");
                    tiposDoses.add(bytesDecoded);

                }

            } catch (EOFException e) {
                System.out.println("Fim dos registros");
            } catch (ClassNotFoundException e) {
                System.out.println("Tipo de objeto invalido!");
            } catch (IOException e) {
                System.out.println("Erro de leitura no arquivo");
            }

            for (int i = 0; i < cidades.size(); i++) {
                for (int j = 0; j < tiposDoses.size(); j++) {
                    //  doses = new DosesAplicadas(cidades.get(i).getBytes("UTF-8"), tiposDoses.get(j).getBytes("UTF-8"), "0".getBytes());
                    output.writeObject(new DosesAplicadas(cidades.get(i).getBytes("UTF-8"), tiposDoses.get(j).getBytes("UTF-8"), 0));
                }
            }

        } catch (IOException e) {
            System.out.println("Erro de escrita no arquivo cidade.dat!");
        }

    }

}
